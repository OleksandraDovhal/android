// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.dovhal.android_labs.android.lab5.network.responces

import com.dovhal.android_labs.android.lab5.network.entities.Weather
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Float
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WeatherResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WeatherResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("latitude", "longitude",
      "generationtime_ms", "elevation", "current_weather")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "latitude")

  private val weatherAdapter: JsonAdapter<Weather> = moshi.adapter(Weather::class.java, emptySet(),
      "currentWeather")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("WeatherResponse").append(')') }

  public override fun fromJson(reader: JsonReader): WeatherResponse {
    var latitude: Float? = null
    var longitude: Float? = null
    var generationTime: Float? = null
    var elevation: Float? = null
    var currentWeather: Weather? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> latitude = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("latitude",
            "latitude", reader)
        1 -> longitude = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("longitude",
            "longitude", reader)
        2 -> generationTime = floatAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("generationTime", "generationtime_ms", reader)
        3 -> elevation = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("elevation",
            "elevation", reader)
        4 -> currentWeather = weatherAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("currentWeather", "current_weather", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return WeatherResponse(
        latitude = latitude ?: throw Util.missingProperty("latitude", "latitude", reader),
        longitude = longitude ?: throw Util.missingProperty("longitude", "longitude", reader),
        generationTime = generationTime ?: throw Util.missingProperty("generationTime",
            "generationtime_ms", reader),
        elevation = elevation ?: throw Util.missingProperty("elevation", "elevation", reader),
        currentWeather = currentWeather ?: throw Util.missingProperty("currentWeather",
            "current_weather", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: WeatherResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("latitude")
    floatAdapter.toJson(writer, value_.latitude)
    writer.name("longitude")
    floatAdapter.toJson(writer, value_.longitude)
    writer.name("generationtime_ms")
    floatAdapter.toJson(writer, value_.generationTime)
    writer.name("elevation")
    floatAdapter.toJson(writer, value_.elevation)
    writer.name("current_weather")
    weatherAdapter.toJson(writer, value_.currentWeather)
    writer.endObject()
  }
}
