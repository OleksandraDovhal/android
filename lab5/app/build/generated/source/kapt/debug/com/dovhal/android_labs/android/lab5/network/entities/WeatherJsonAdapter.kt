// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.dovhal.android_labs.android.lab5.network.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WeatherJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Weather>() {
  private val options: JsonReader.Options = JsonReader.Options.of("temperature", "windspeed",
      "winddirection", "weathercode", "time")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "temperature")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "weathercode")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "time")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Weather").append(')') }

  public override fun fromJson(reader: JsonReader): Weather {
    var temperature: Float? = null
    var windspeed: Float? = null
    var winddirection: Float? = null
    var weathercode: Int? = null
    var time: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> temperature = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("temperature",
            "temperature", reader)
        1 -> windspeed = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("windspeed",
            "windspeed", reader)
        2 -> winddirection = floatAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("winddirection", "winddirection", reader)
        3 -> weathercode = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("weathercode",
            "weathercode", reader)
        4 -> time = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("time", "time",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Weather(
        temperature = temperature ?: throw Util.missingProperty("temperature", "temperature",
            reader),
        windspeed = windspeed ?: throw Util.missingProperty("windspeed", "windspeed", reader),
        winddirection = winddirection ?: throw Util.missingProperty("winddirection",
            "winddirection", reader),
        weathercode = weathercode ?: throw Util.missingProperty("weathercode", "weathercode",
            reader),
        time = time ?: throw Util.missingProperty("time", "time", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Weather?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("temperature")
    floatAdapter.toJson(writer, value_.temperature)
    writer.name("windspeed")
    floatAdapter.toJson(writer, value_.windspeed)
    writer.name("winddirection")
    floatAdapter.toJson(writer, value_.winddirection)
    writer.name("weathercode")
    intAdapter.toJson(writer, value_.weathercode)
    writer.name("time")
    stringAdapter.toJson(writer, value_.time)
    writer.endObject()
  }
}
